from django.db import models

from django2use.basic.models import *

from .helpers import update_dns_record

from django2use.settings import DYNAMICDNS_PROVIDERS

#*********************************************************************

WEBSITE_TYPEs = (
    ('wp', "WordPress"),

    ('mg', "Magento"),
    ('ps', "PrestaShop"),
)

PROVIDER_CHOICES = [(name, name) for name in DYNAMICDNS_PROVIDERS.keys()]

######################################################################

class Domain(models.Model):
    owner   = models.ForeignKey(Organism, related_name='domaines', on_delete=models.CASCADE)
    alias   = models.CharField(max_length=64)

    start   = models.DateTimeField(blank=True)
    finis   = models.DateTimeField(blank=True)

    price   = models.FloatField(default=0)

#*********************************************************************

class Machine(models.Model):
    owner    = models.ForeignKey(Organism, related_name='machines', on_delete=models.CASCADE)
    alias    = models.CharField(max_length=64)
    token    = models.CharField(max_length=50, default=uuid4, help_text='Optional - Autogenerated if left blank')

    mac_addr = models.CharField(max_length=256, blank=True)
    ip4_addr = models.GenericIPAddressField(unpack_ipv4=False, blank=True, verbose_name="IPv4 address", null=True, default=None)
    ip6_addr = models.GenericIPAddressField(unpack_ipv4=True, blank=True, verbose_name="IPv6 address", null=True, default=None)

    hostname = models.CharField(max_length=256)
    provider = models.CharField(max_length=25, choices=PROVIDER_CHOICES, blank=True)
    username = models.CharField(max_length=256, default='root')
    password = models.CharField(max_length=256, blank=True)

    last_time = models.DateTimeField(blank=True, null=True)

    def generate_key(self, size=50, chars=string.ascii_uppercase + string.ascii_lowercase + string.digits):
        return ''.join(random.choice(chars) for x in range(size))

    def save(self):
        if not self.key:
            self.key = self.generate_key()
        update_dns_record(self, self.ip)
        self.last_change = timezone.now()
        super(DnsRecord, self).save()

    class Meta:
        verbose_name = 'Machine'

    def __str__(self): return str(self.alias)

######################################################################

class Hosting(models.Model):
    owner   = models.ForeignKey(Organism, related_name='hosting', on_delete=models.CASCADE)
    alias   = models.CharField(max_length=64)

    target  = models.URLField(blank=True)
    pseudo  = models.CharField(max_length=256,blank=True)
    passwd  = models.CharField(max_length=256,blank=True)
    domain  = models.ManyToManyField(Domain, related_name='hosting', blank=True)

    def __str__(self): return str(self.alias)

#*********************************************************************

class Website(models.Model):
    owner   = models.ForeignKey(Organism, related_name='websites', on_delete=models.CASCADE)
    alias   = models.CharField(max_length=64)

    frame   = models.CharField(max_length=24,choices=WEBSITE_TYPEs,blank=True)
    where   = models.ForeignKey(Hosting, related_name='websites', on_delete=models.CASCADE)

    target  = models.URLField(blank=True)
    pseudo  = models.CharField(max_length=256,blank=True)
    passwd  = models.CharField(max_length=256,blank=True)
    #domain  = models.ManyToManyField(Domain, related_name='hosting', blank=True)

    def __str__(self): return str(self.alias)
