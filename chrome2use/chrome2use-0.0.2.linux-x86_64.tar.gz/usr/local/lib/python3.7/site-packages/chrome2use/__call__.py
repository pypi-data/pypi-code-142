#!/usr/bin/python3

import os,sys,json,click,jinja2

from tqdm import tqdm

#*******************************************************************************

def shell(command, *argument, **options):
    args = lambda value: ('"%s"' % value) if ((" " in value) or ("?" in value)) else value

    if options.get('x11',False):
        command = "gnome-terminal"

        argument = ['-c', '"%s %s"' % (command,' '.join([args(x) for x in argument]))]

    stmt = ' '.join([command] + [args(x) for x in argument])

    os.system(stmt)

def ensure_dir(ctx,*path):
    dest = ctx.obj['rpath'](*path)

    if not os.path.exists(dest):
        shell('mkdir','-p',dest)

    os.chdir(dest)

#*******************************************************************************

class Project(object):
    def __init__(self, base, prnt, name):
        self._dir = base

        self._prn = prnt
        self._key = name

        if os.path.exists(self.spath("manifest.json")):
            self._cfg = json.load(open(self.spath("manifest.json")))
        else:
            self._cfg = {
                "menu": [
                    { "link": "/index.html", "name": "Dashboard" },
                    { "link": "/setup.html", "name": "Endpoints" }
                ],
                "text": self.name.capitalize(),
            }

        if "code" not in self._cfg:
            self._cfg["code"] = {}

        self._cfg["code"]["engin"] = [
            os.path.join("engin",x) for x in
            os.listdir(self.spath("engin"))
            if x.endswith(".js")
        ]
        self._cfg["code"]["front"] = self._cfg["code"].get("front",[])

        for key in [
            dict(opts={
                "matches": ["http://*/*", "https://*/*"],
                "all_frames": True,
                "run_at": "document_idle"
            }, name="extends"),
            dict(opts={
                "matches": ["<all_urls>"],
                "run_at": "document_idle"
            }, name="decoder"),
            dict(opts={
                "matches": ["<all_urls>"],
                "run_at": "document_start"
            }, name="content"),
        ]:
            if not os.path.exists(self.spath("front",key["name"])):
                os.mkdir(self.spath("front",key["name"]))

            opt = key["opts"] ; opt["js"] = []

            for sub in os.listdir(self.spath("front",key["name"])):
                pth = os.path.join("front",key["name"],sub)

                opt["js"].append(pth)

            self._cfg["code"]["front"].append(opt)

        self._cfg["unit"] = self.unit
        self._cfg["name"] = self.name

        self._cfg["skin"] = self._cfg.get("skin","bootstrap")

        self._cfg["word"] = self._cfg.get("help",self._cfg["text"]).split(" ")

        self._env = jinja2.Environment(
            autoescape=False,
            optimized=True,
            auto_reload=True,
        loader=jinja2.loaders.PrefixLoader({
            "engin": jinja2.loaders.FileSystemLoader(self.spath('engin')),
            "front": jinja2.loaders.FileSystemLoader(self.spath('front')),
            "views": jinja2.loaders.FileSystemLoader(self.spath('views')),
            "objet": jinja2.loaders.FileSystemLoader(self.rpath('theme',self._cfg["skin"],'object')),
            "theme": jinja2.loaders.FileSystemLoader(self.rpath('theme',self._cfg["skin"],'layout')),
            "pages": jinja2.loaders.FileSystemLoader(self.rpath('pages')),
            "world": jinja2.loaders.FileSystemLoader(self.rpath('views')),
        },delimiter="::"))

    unit = property(lambda self: self._prn)
    name = property(lambda self: self._key)

    bpath = lambda self,*args: os.path.join(self._dir,*args)
    rpath = lambda self,*args: self.bpath("resource",*args)
    spath = lambda self,*args: self.bpath("sourcing",self.unit,self.name,*args)
    tpath = lambda self,*args: self.bpath("targeted",self.unit,self.name,*args)

    def __setitem__(self,alias,value):
        if self._cfg is not None:
            self._cfg[alias] = value

        return value

    def __getitem__(self,alias,value=None):
        if self._cfg is not None:
            return self._cfg.get(alias,value)

        return value

    def views(self, path, **data):
        return self._env.get_template(path).render(data)

    def infos(self):
        if os.path.exists(self.rpath("manifest.json")):
            opt = json.load(open(self.rpath("manifest.json")))

            opt["name"]        = self._cfg["text"]
            opt["description"] = self._cfg["help"]
            opt["version"]     = "0.0.1"

            opt["icons"] = {
                "16": "brand.png",
                "48": "brand.png",
                "128": "brand.png",
            }

            opt["content_scripts"]       = self._cfg["code"]["front"]
            opt["background"]["scripts"] = self._cfg["code"]["engin"]

            self.write(opt,"manifest.json")

        if os.path.exists(self.rpath("bower.json")):
            opt = json.load(open(self.rpath("bower.json")))

            opt["name"]        = self._cfg["text"]
            opt["description"] = self._cfg["help"]
            opt["version"]     = "0.0.1"

            opt["authors"]     = [
                "TAYAA Med Amine"
            ]
            opt["main"]        = "index.js"

            self.write(opt,"bower.json")

    def asset(self):
        for key in ["bower","media"]:
            if os.path.exists(self.rpath(key)):
                shell("cp","-afR",self.rpath(key),self.tpath())

        for key in ["asset","engin","front","units"]:
            if os.path.exists(self.spath(key)):
                shell("cp","-afR",self.spath(key),self.tpath())

        if os.path.exists(self.rpath("theme",self._cfg["skin"],"static")):
            shell("cp","-afR",self.rpath("theme",self._cfg["skin"],"static"),self.tpath("theme"))

        shell("cp","-afR",self.spath("brand.png"),self.tpath("brand.png"))

    def pages(self, *folder):
        for tpl in os.listdir(self.spath("views",*folder)):
            pth = self.spath("views",*(list(folder)+[tpl]))

            if os.path.isdir(pth):
                pth = self.tpath(*(list(folder)+[tpl]))

                if not os.path.exists(pth): os.mkdir(pth)

                self.pages(*(list(folder)+[tpl]))
            elif tpl.endswith(".html"):
                key = "/".join((list(folder)+[tpl]))

                curr = {
                    "base": os.path.dirname(pth),
                    "name": os.path.basename(pth),
                    "path": pth,
                }

                if os.path.extsep in curr["name"]:
                    curr["name"],curr["type"] = os.path.splitext(curr["name"])

                    curr["type"] = curr["type"][0:]

                res = self.views("views::"+key,
                    page=curr,
                    spec=self._cfg,
                )

                dir = self.tpath(*folder)

                if not os.path.exists(dir):
                    shell("mkdir","-p",dir)

                with open(self.tpath(*(list(folder)+[tpl])),"w+") as f:
                    f.write(res)
            else:
                shell("cp","-afR",
                    self.spath("views",*(list(folder)+[tpl]))
                ,
                    self.tpath(*(list(folder)+[tpl]))
                )

    def write(self, payload, *target):
        with open(self.tpath(*target),"w+") as f:
            f.write(json.dumps(payload,indent=4))

    def reset(self): shell("rm","-fR",self.tpath("*"))

#*******************************************************************************

@click.group()
@click.option('--bpath', default=None)
@click.option('--debug/--no-debug', default=False)
@click.pass_context
def cli(ctx,debug, bpath):
    if bpath is None:
        bpath = os.curdir

    ctx.obj['bpath'] = os.path.abspath(bpath)
    ctx.obj['rpath'] = lambda *x: os.path.join(bpath, *x)

    #click.echo('Base dir : %(bpath)s' % ctx.obj)

    ctx.obj['units'] = []

    for prn in os.listdir(ctx.obj['rpath']("sourcing")):
        for key in os.listdir(ctx.obj['rpath']("sourcing",prn)):
            entry = Project(ctx.obj['bpath'], prn, key)

            ctx.obj['units'].append(entry)

    #click.echo(f"Debug mode is {'on' if debug else 'off'}")

    ctx.obj['debug'] = debug

################################################################################

@cli.command('units')
@click.option('--infos/--no-infos', default=False)
@click.option('--language','-l',multiple=True, default=[
    'arabic','french','english','spanish','german','italian','hungarian'
])
@click.option('--version','-v', type=str, default='4.3.2')
@click.pass_context
def listing(ctx,infos,language,version):
    for entry in ctx.obj['units']:
        if os.path.exists(entry.spath("manifest.json")):
            print("-> ",entry.unit,entry.name)

            if infos: entry.infos()

    #click.echo('RDF-HDT.org :')

#*******************************************************************************

@cli.command('build')
@click.option('--language','-l',multiple=True, default=[
    'arabic','french','english','spanish','german','italian','hungarian'
])
@click.option('--reset/--no-reset', default=False)
@click.option('--specs/--no-specs', default=False)
@click.option('--asset/--no-asset', default=False)
@click.pass_context
def building(ctx,language,reset,specs,asset):
    for entry in ctx.obj['units']:
        if os.path.exists(entry.spath("manifest.json")):
            print("-> ",entry.unit,entry.name)

            if reset:
                shell("rm","-fR",entry.tpath("*"))

                if not os.path.exists(entry.tpath()):
                    os.mkdir(entry.tpath())

                for key in ["asset","engin","front","media","units"]:
                    if not os.path.exists(entry.tpath(key)):
                        shell("mkdir","-p",entry.tpath(key))

            if reset or specs:
                entry.infos()

            if reset or asset:
                entry.asset()

            entry.pages()

    #click.echo('RDF-HDT.org :')

################################################################################

@cli.command('nltk')
@click.option('--install/--no-setup', default=False)
@click.option('--download/--no-fetch', default=False)
@click.option('--language','-l',multiple=True, default=['ar','fr','en'])
@click.pass_context
def nltk_trainer(ctx,install,download,language):
    click.echo('NLTK corporas :')

    dest = ctx.obj['rpath']('lobe','nlp','nltk')

    if not os.path.exists(dest):
        shell('mkdir','-p',dest)

    os.environ['NLTK_DATA'] = dest

    shell('python2','-m','nltk.download','--all')

#*******************************************************************************

@cli.command('opencv')
@click.pass_context
def openvino_zoo(ctx):
    click.echo('OpenCV Model Zoo :')

    dest = ctx.obj['rpath']('lobe','eye','open')

    if not os.path.exists(dest):
        shell('git','clone','https://github.com/openvinotoolkit/open_model_zoo.git',dest)

    os.chdir(dest)

    #shell('tools/model_tools/downloader.py','--all','--output_dir',dest)

    #shell('omz_downloader','--all','--output_dir',dest)

################################################################################

if __name__ == '__main__':
    cli(
        obj={},
    )
